import React, { useState } from 'react';
import './GameSection.css';
import CompostImg from '../image/composte.png';
import fridgeImg from '../image/Stilledible.png';
import trashImg from '../image/trashes.png';

const GameSection = () => {
    const [currentItem, setCurrentItem] = useState(null);
    const [score, setScore] = useState(0);
    const [gameStarted, setGameStarted] = useState(false);
    const [gameOver, setGameOver] = useState(false);
    const [showConclusion, setShowConclusion] = useState(false);
    const [itemsProcessed, setItemsProcessed] = useState(0);
    const MAX_ITEMS = 20;

    const foodItems = [
        { aliment: "Banane", etat: "Tr√®s m√ªre, noire, peau tachet√©e, molle", destination: "Composte", icon: "üçå" },
        { aliment: "Pomme", etat: "Froiss√©e, un peu molle mais sans taches", destination: "√Ä consommer", icon: "üçè" },
        { aliment: "Yaourt nature", etat: "Date de p√©remption d√©pass√©e de 1 jour", destination: "√Ä consommer", icon: "ü•õ" },
        { aliment: "Pain", etat: "Durci mais pas moisi, cro√ªte s√®che", destination: "√Ä consommer", icon: "üçû" },
        { aliment: "Tomate", etat: "Tr√®s m√ªre, fendue, jus qui s'√©chappe", destination: "Composte", icon: "üçÖ" },
        { aliment: "Fromage (camembert)", etat: "Tr√®s affin√©, cro√ªte odorante mais normale", destination: "√Ä consommer", icon: "üßÄ" },
        { aliment: "Lait", etat: "Ouvert depuis 4 jours, pas encore tourn√©", destination: "√Ä consommer", icon: "ü•õ" },
        { aliment: "Feuille de salade", etat: "Fl√©trie, un peu molle, pas moisie", destination: "Composte", icon: "ü•¨" },
        { aliment: "Riz cuit", etat: "Restes de la veille, conserv√© au frigo", destination: "√Ä consommer", icon: "üçö" },
        { aliment: "Carottes", etat: "Un peu molles, peau rid√©e", destination: "√Ä consommer", icon: "ü•ï" },
        { aliment: "Poulet cuit", etat: "3 jours dans le frigo, odeur douteuse", destination: "Poubelle", icon: "üçó" },
        { aliment: "Biscuit", etat: "Sec, emballage ouvert depuis 2 jours", destination: "√Ä consommer", icon: "üç™" },
        { aliment: "Jambon", etat: "Odeur l√©g√®rement acide, couleur p√¢le", destination: "Poubelle", icon: "ü•ì" },
        { aliment: "≈íuf cru", etat: "Non cass√©, √† tester dans l'eau", destination: "√Ä consommer", icon: "ü•ö" },
        { aliment: "Croissant", etat: "Rassis, texture s√®che mais pas moisi", destination: "√Ä consommer", icon: "ü•ê" },
        { aliment: "Fromage r√¢p√©", etat: "Pr√©sence de moisissure visible", destination: "Poubelle", icon: "üßÄ" },
        { aliment: "Conserve de haricots", etat: "Bo√Æte caboss√©e mais non ouverte", destination: "√Ä consommer", icon: "ü•´" },
        { aliment: "Avocat", etat: "Chair noire et p√¢teuse √† l'int√©rieur", destination: "Composte", icon: "ü•ë" },
        { aliment: "≈íuf dur", etat: "2 jours apr√®s cuisson, bien conserv√©", destination: "√Ä consommer", icon: "ü•ö" },
        { aliment: "Confiture", etat: "Pellicule blanche de moisissure en surface", destination: "Poubelle", icon: "üçØ" },
        { aliment: "Poire", etat: "M√ªre √† point, l√©g√®rement tachet√©e", destination: "√Ä consommer", icon: "üçê" },
        { aliment: "Brocoli", etat: "Feuilles fan√©es, tiges encore fermes", destination: "Composte", icon: "ü•¶" },
        { aliment: "Fromage blanc", etat: "Ouvert depuis 3 jours, odeur fra√Æche", destination: "√Ä consommer", icon: "ü•õ" },
        { aliment: "≈íufs de caille", etat: "Bo√Æte non ouverte, fra√Æche", destination: "√Ä consommer", icon: "ü•ö" },
        { aliment: "Pommes de terre", etat: "Germ√©es mais fermes", destination: "√Ä consommer", icon: "ü•î" },
        { aliment: "Poivron rouge", etat: "Peau rid√©e, pas de moisissure", destination: "√Ä consommer", icon: "ü´ë" },
        { aliment: "Jus d'orange frais", etat: "Ouvert depuis 2 jours, go√ªt acidul√©", destination: "√Ä consommer", icon: "üßÉ" },
        { aliment: "Filet de saumon", etat: "Tr√®s frais, emballage intact", destination: "√Ä consommer", icon: "üêü" },
        { aliment: "Chocolat noir", etat: "Un peu blanc, comestible", destination: "√Ä consommer", icon: "üç´" },
        { aliment: "Yaourt aux fruits", etat: "Date limite d√©pass√©e de 2 jours", destination: "Poubelle", icon: "ü•õ" },
        { aliment: "Salade de fruits", etat: "Pr√©par√©e la veille, bien conserv√©e", destination: "√Ä consommer", icon: "üçá" },
        { aliment: "Steak hach√©", etat: "Date de p√©remption aujourd'hui", destination: "√Ä consommer", icon: "ü•©" },
        { aliment: "Thon en conserve", etat: "Bo√Æte non ouverte, stockage optimal", destination: "√Ä consommer", icon: "ü•´" },
        { aliment: "C√©r√©ales", etat: "Paquet ouvert depuis 1 semaine", destination: "√Ä consommer", icon: "ü•£" },
        { aliment: "Concombre", etat: "Frais, sans taches", destination: "√Ä consommer", icon: "ü•í" },
        { aliment: "Yaourt grec", etat: "Ouvert, utilis√© √† moiti√©", destination: "√Ä consommer", icon: "ü•õ" },
        { aliment: "Poitrine de poulet crue", etat: "Emballage scell√©, fra√Æcheur maximale", destination: "√Ä consommer", icon: "üçó" },
        { aliment: "Carottes r√¢p√©es", etat: "Pr√©par√©es il y a 3 jours, bien ferm√©es", destination: "√Ä consommer", icon: "ü•ï" },
        { aliment: "Gel√©e de fruits", etat: "Ferm√©e, date de p√©remption dans 6 mois", destination: "√Ä consommer", icon: "üçÆ" },
        { aliment: "Pain de mie", etat: "Tranches un peu s√®ches, non moisies", destination: "√Ä consommer", icon: "üçû" }
    ];

    const getTypeFromDestination = (destination) => {
        if (destination === 'Composte') return 'Composte';
        if (destination === 'Poubelle') return 'trash';
        return 'fridge'; 
    };

    const getRandomItem = () => {
        return foodItems[Math.floor(Math.random() * foodItems.length)];
    };

    const startGame = () => {
        setGameStarted(true);
        setGameOver(false);
        setShowConclusion(false);
        setScore(0);
        setItemsProcessed(0);
        setCurrentItem(getRandomItem());
    };

    const handleSort = (selectedType) => {
        if (!currentItem) return;
        const isCorrect = selectedType === getTypeFromDestination(currentItem.destination);
        if (isCorrect) {
            setScore(score + 10);
        }
        const newItemsProcessed = itemsProcessed + 1;
        setItemsProcessed(newItemsProcessed);
        if (newItemsProcessed >= MAX_ITEMS) {
            setGameOver(true);
            setGameStarted(false);
            setShowConclusion(false);
        } else {
            setCurrentItem(getRandomItem());
        }
    };

    const getTrashImage = (type) => {
        switch (type) {
            case 'composte': return CompostImg;
            case 'trash': return trashImg;
            case 'fridge': return fridgeImg;
            default: return '';
        }
    };

    const getTrashLabel = (type) => {
        switch (type) {
            case 'composte': return 'Composte';
            case 'trash': return 'Poubelle';
            case 'fridge': return 'Frigo';
            default: return 'Autre';
        }
    };

    return (
        <section id="game-section" className="game-section">
            <div className="container">
                <h2 className="section-title">Jeu de Tri Alimentaire</h2>
                <p className="section-subtitle">
                    Triez les aliments dans la bonne zone ! Triez 20 objets pour terminer la partie.
                </p>
                {!gameStarted && !gameOver && !showConclusion && (
                    <div className="game-start">
                        <button className="btn btn-primary start-btn" onClick={startGame}>
                            Commencer le Jeu
                        </button>
                    </div>
                )}
                {gameOver && !gameStarted && !showConclusion && (
                    <div className="game-over">
                        <h3>Partie termin√©e !</h3>
                        <p>Score final : {score} points</p>
                        <button className="btn btn-primary" onClick={startGame}>
                            Rejouer
                        </button>
                    </div>
                )}
                {gameStarted && !gameOver && !showConclusion && (
                    <div className="game-container">
                        <div style={{textAlign: 'center', fontWeight: 700, fontSize: '1.2rem', marginBottom: 8, color: '#388e3c'}}>
                            Score : {score} points
                        </div>
                        {currentItem && (
                            <>
                                <div style={{textAlign: 'center', fontWeight: 600, marginBottom: 6, fontSize: '1.1rem'}}>
                                    {itemsProcessed + 1} / 20
                                </div>
                                <div className="current-item">
                                    <div className="item-display">
                                        <span className="item-icon" style={{fontSize: '2.5rem'}}>{currentItem.icon}</span>
                                        <div className="item-name">{currentItem.aliment}</div>
                                    </div>
                                    <div className="item-etat">{currentItem.etat}</div>
                                    <p className="item-instruction">O√π jeter cet objet ?</p>
                                </div>
                            </>
                        )}
                        <div className="trash-bins">
                            {['composte', 'fridge', 'trash'].map((type) => (
                                <div
                                    key={type}
                                    className="trash-bin"
                                    onClick={() => handleSort(type)}
                                >
                                    <img src={getTrashImage(type)} alt={type} className="trash-image" />
                                    <div className="trash-label">{getTrashLabel(type)}</div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
                <div className="game-instructions">
                    <h3>Instructions :</h3>
                    <div className="instructions-grid">
                        <div className="instruction">
                            <img src={CompostImg} alt="Composte" className="instruction-icon" style={{width: '40px', height: '55px'}} />
                            <div>
                                <strong>Composte :</strong> √âpluchures, fruits pourris, marc de caf√©, pain rassis
                            </div>
                        </div>
                        <div className="instruction">
                            <img src={fridgeImg} alt="Frigo" className="instruction-icon" style={{width: '40px', height: '55px'}} />
                            <div>
                                <strong>Frigo :</strong> Aliments encore consommables et frais
                            </div>
                        </div>
                        <div className="instruction">
                            <img src={trashImg} alt="Poubelle" className="instruction-icon" style={{width: '40px', height: '55px'}} />
                            <div>
                                <strong>Poubelle :</strong> Aliments avari√©s, viande p√©rim√©e, produits laitiers p√©rim√©s
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default GameSection; 